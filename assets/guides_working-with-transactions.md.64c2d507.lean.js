import{_ as s,v as a,b as n,R as o}from"./chunks/framework.f247d2cd.js";const h=JSON.parse('{"title":"Working with Transactions","description":"","frontmatter":{"outline":[2,3]},"headers":[],"relativePath":"guides/working-with-transactions.md","filePath":"src/pages/guides/working-with-transactions.md"}'),e={name:"guides/working-with-transactions.md"},t=o(`<h1 id="working-with-transactions" tabindex="-1">Working with Transactions <a class="header-anchor" href="#working-with-transactions" aria-label="Permalink to &quot;Working with Transactions&quot;">​</a></h1><p>A transaction stands as the testament to the execution of a contract within the framework of TVM (TON Virtual Machine) compatible blockchains.</p><p>Typically, a single incoming message, whether external or internal, gives rise to a transaction. This transaction, in turn, has the potential to produce multiple outgoing messages, which can also be either external or internal.</p><p>It&#39;s essential to understand that transactions can either reach successful completion or get aborted.</p><h3 id="preliminary-step" tabindex="-1">Preliminary Step <a class="header-anchor" href="#preliminary-step" aria-label="Permalink to &quot;Preliminary Step&quot;">​</a></h3><p>Before diving into the specifics of transactions, we need a transaction instance for our examples. For the purpose of this guide, we&#39;ll retrieve a transaction using the <code>get_transaction</code> method from the transport and assign it to the variable <code>tx</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> transport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_transaction</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#FFCB6B;">bytes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromHex</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2a7c997e25c5849460057e0e066525647d0b0f657195c81d5f7ffa522ab1d552</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result" tabindex="-1">Result <a class="header-anchor" href="#result" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2a7c997e25c5849460057e0e066525647d0b0f657195c81d5f7ffa522ab1d552</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a detailed guide on working with the transport, including sending transactions, please refer to <a href="./working-with-transport.html"><strong><code>Working with Transport</code></strong></a>.</p><p>For a visual representation of the transaction, you can follow this <a href="https://testnet.everscan.io/transactions/2a7c997e25c5849460057e0e066525647d0b0f657195c81d5f7ffa522ab1d552" target="_blank" rel="noreferrer"><strong><code>link</code></strong></a> which leads to the blockchain explorer.</p></div><h2 id="transaction-types" tabindex="-1">Transaction Types <a class="header-anchor" href="#transaction-types" aria-label="Permalink to &quot;Transaction Types&quot;">​</a></h2><p>In the TVM-compatible blockchains, there are three types of transactions:</p><ul><li>Ordinary Transactions: These are the regular transactions that occur between accounts.</li><li>Tick Transactions: These are special transactions that occur at the beginning of a block, without an incoming message.</li><li>Tock Transactions: These are special transactions that occur at the end of a block, also without an incoming message.</li></ul><p>These transaction types are represented by the <code>TransactionType</code> enum in the <code>nekoton-python</code> library.</p><h3 id="checking-transaction-types" tabindex="-1">Checking Transaction Types <a class="header-anchor" href="#checking-transaction-types" aria-label="Permalink to &quot;Checking Transaction Types&quot;">​</a></h3><p>The <code>TransactionType</code> class provides a property called <code>type</code> to determine the nature of a transaction. Here&#39;s how you can use it:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Ordinary</span></span></code></pre></div><h2 id="transaction-phases" tabindex="-1">Transaction Phases <a class="header-anchor" href="#transaction-phases" aria-label="Permalink to &quot;Transaction Phases&quot;">​</a></h2><p>Each transaction in a TVM-compatible blockchain consists of up to five phases: the Storage Phase, the Credit Phase, the Compute Phase, the Action Phase, and the Bounce Phase. Each of these phases is represented by a separate class in the <code>nekoton-python</code> library.</p><h3 id="storage-phase" tabindex="-1">Storage Phase <a class="header-anchor" href="#storage-phase" aria-label="Permalink to &quot;Storage Phase&quot;">​</a></h3><p>The <code>TransactionStoragePhase</code> class represents the storage phase of a transaction. In this phase, the storage fees accrued by the contract due to the occupation of some space in the chain state are calculated.</p><p>You can access the amount of collected storage fees and the status change during this phase through the <code>storage_fees_collected</code>, <code>storage_fees_due</code> and <code>status_change</code> properties, respectively.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">storage_phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">storage_phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Storage fees collected: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">storage_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">storage_fees_collected</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Storage fees due: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">storage_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">storage_fees_due</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Status change: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">storage_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">status_change</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-1" tabindex="-1">Result <a class="header-anchor" href="#result-1" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Storage fees collected</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.002573887</span></span>
<span class="line"><span style="color:#A6ACCD;">Storage fees due</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">Status change</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Unchanged</span></span></code></pre></div><h3 id="credit-phase" tabindex="-1">Credit Phase <a class="header-anchor" href="#credit-phase" aria-label="Permalink to &quot;Credit Phase&quot;">​</a></h3><p>The <code>TransactionCreditPhase</code> class represents the credit phase of a transaction. In this phase, the balance of the contract with respect to a possible incoming message value and the collected storage fee are calculated. You can access the amount of collected due fees and the increased balance through the <code>due_fees_collected</code> and <code>credit</code> properties, respectively.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">credit_phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">credit_phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Due fees collected: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">credit_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">due_fees_collected</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Credit: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">credit_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">credit</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-2" tabindex="-1">Result <a class="header-anchor" href="#result-2" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Due fees collected</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">Credit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><h3 id="compute-phase" tabindex="-1">Compute Phase <a class="header-anchor" href="#compute-phase" aria-label="Permalink to &quot;Compute Phase&quot;">​</a></h3><p>The <code>TransactionComputePhase</code> class encapsulates the compute phase of a transaction. During this phase, the TON Virtual Machine (TVM) runs, producing a result that aggregates several elements:</p><ul><li><strong>Exit Code:</strong> <code>exit_code</code></li><li><strong>Actions:</strong> Serialized list of <code>actions</code></li><li><strong>Gas Details:</strong> <code>gas_details</code></li><li><strong>New Storage:</strong> <code>new_storage</code></li></ul><p>This phase also offers insights into:</p><ul><li><strong>Success:</strong> Indicates if the compute phase was successful (<code>success</code>).</li><li><strong>Message State Used:</strong> Specifies if the message state was utilized (<code>msg_state_used</code>).</li><li><strong>Account State:</strong> Whether the account is activated (<code>account_activated</code>).</li><li><strong>Gas Fees:</strong> The total gas fees incurred (<code>gas_fees</code>).</li><li><strong>Gas Used:</strong> The amount of gas consumed (<code>gas_used</code>).</li><li><strong>Gas Limit:</strong> The maximum gas that can be used (<code>gas_limit</code>).</li><li><strong>Gas Credit:</strong> The gas credit available (<code>gas_credit</code>).</li><li><strong>Transaction Mode:</strong> The mode of the transaction (<code>mode</code>).</li><li><strong>Exit Argument:</strong> Additional information or context for the exit code (<code>exit_arg</code>).</li><li><strong>VM Steps:</strong> Number of steps taken by the VM (<code>vm_steps</code>).</li><li><strong>VM State Hashes:</strong> Initial (<code>vm_init_state_hash</code>) and final (<code>vm_final_state_hash</code>) state hashes of the VM.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">compute_phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">compute_phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Success: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">success</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Message state used: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">msg_state_used</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Account activated: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">account_activated</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Gas fees: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">gas_fees</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Gas used: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">gas_used</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Gas limit: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">gas_limit</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Gas credit: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">gas_credit</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Mode: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mode</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Exit code: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">exit_code</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Exit argument: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">exit_arg</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;VM steps: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">vm_steps</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;VM initial state hash: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">vm_init_state_hash</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;VM final state hash: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">vm_final_state_hash</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-3" tabindex="-1">Result <a class="header-anchor" href="#result-3" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Success</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">Message state used</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">Account activated</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">Gas fees</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.006042</span></span>
<span class="line"><span style="color:#A6ACCD;">Gas used</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6042</span></span>
<span class="line"><span style="color:#A6ACCD;">Gas limit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Gas credit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span></span>
<span class="line"><span style="color:#A6ACCD;">Mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Exit code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Exit argument</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">VM steps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">143</span></span>
<span class="line"><span style="color:#A6ACCD;">VM initial state </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">VM final state </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h3 id="action-phase" tabindex="-1">Action Phase <a class="header-anchor" href="#action-phase" aria-label="Permalink to &quot;Action Phase&quot;">​</a></h3><p>The <code>TransactionActionPhase</code> class handles the action phase of a transaction. During this phase, output messages from the Compute Phase are dispatched. The main actions include:</p><ul><li>Internal Outbound Messages</li><li>Event Messages</li><li>RawReserve</li><li>SetCode</li></ul><h3 id="key-properties" tabindex="-1">Key Properties <a class="header-anchor" href="#key-properties" aria-label="Permalink to &quot;Key Properties&quot;">​</a></h3><p>Key properties of the action phase include:</p><ul><li><strong>Success Status:</strong> Indicates whether the action phase was successful.</li><li><strong>Valid:</strong> Specifies if the action phase is valid.</li><li><strong>No Funds:</strong> Indicates if there are insufficient funds for the action.</li><li><strong>Status Change:</strong> Reflects any status changes during the action phase.</li><li><strong>Total Forward Fees:</strong> The total fees forwarded during this phase.</li><li><strong>Total Action Fees:</strong> The total fees associated with the actions.</li><li><strong>Result Code:</strong> The resulting code after the action phase.</li><li><strong>Result Argument:</strong> Any arguments related to the result code.</li><li><strong>Total Actions:</strong> The total number of actions dispatched during this phase.</li><li><strong>Special Actions:</strong> The number of unique or special actions taken.</li><li><strong>Skipped Actions:</strong> Actions that were skipped during this phase.</li><li><strong>Messages Created:</strong> The number of output messages created during the Compute Phase that are dispatched in this phase.</li><li><strong>Action List Hash:</strong> The hash of the list of actions.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">action_phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">action_phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Success: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">success</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Valid: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">valid</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;No funds: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">no_funds</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Status change: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">status_change</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Total forward fees: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">total_fwd_fees</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Total action fees: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">total_action_fees</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Result code: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">result_code</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Result argument: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">result_arg</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Total actions: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">total_actions</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Special actions: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">special_actions</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Skipped actions: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">skipped_actions</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Messages created: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">messages_created</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Action list hash: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">action_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">action_list_hash</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-4" tabindex="-1">Result <a class="header-anchor" href="#result-4" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Success</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">Valid</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">No funds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">Status change</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Unchanged</span></span>
<span class="line"><span style="color:#A6ACCD;">Total forward fees</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.000566</span></span>
<span class="line"><span style="color:#A6ACCD;">Total action fees</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.000566</span></span>
<span class="line"><span style="color:#A6ACCD;">Result code</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Result argument</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">Total actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">Special actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Skipped actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">Messages created</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">Action </span><span style="color:#FFCB6B;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]s</span><span style="color:#A6ACCD;">\\x17</span><span style="color:#C3E88D;">\`</span><span style="color:#A6ACCD;">\\xee\\xd8\\x89\\xd7</span><span style="color:#C3E88D;">=v(</span><span style="color:#A6ACCD;">\\x8d\\xd5</span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;">\\xd8\\xb3</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;">\\xe6\\xf6</span><span style="color:#C3E88D;">N&quot;</span><span style="color:#A6ACCD;">\\xdc\\xbb\\xf3\\x8e\\x1a</span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;">\\xdf\\xbf</span><span style="color:#C3E88D;">-F</span><span style="color:#A6ACCD;">\\r</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Caution</p><p>A maximum of 255 actions can be dispatched during this phase. Exceeding this limit aborts the transaction.</p></div><h3 id="bounce-phase" tabindex="-1">Bounce Phase <a class="header-anchor" href="#bounce-phase" aria-label="Permalink to &quot;Bounce Phase&quot;">​</a></h3><p>The <code>TransactionBouncePhase</code> class represents the bounce phase of a transaction. If the compute phase failed (it returned exit_code &gt;= 2), in this phase, a bounce message is formed for transactions initiated by an incoming message. You can access the message fees and forward fees through the <code>msg_fees</code> and <code>fwd_fees</code> properties, respectively.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">bounce_phase </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bounce_phase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Message fees: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">bounce_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">msg_fees</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;Forward fees: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">bounce_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">fwd_fees</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-5" tabindex="-1">Result <a class="header-anchor" href="#result-5" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Message fees</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.000000000</span></span>
<span class="line"><span style="color:#A6ACCD;">Forward fees</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.000000000</span></span></code></pre></div><h2 id="transaction-executor" tabindex="-1">Transaction Executor <a class="header-anchor" href="#transaction-executor" aria-label="Permalink to &quot;Transaction Executor&quot;">​</a></h2><p>The <code>TransactionExecutor</code> class in the <code>nekoton-python</code> is a local transaction executor. It allows you to simulate the execution of a transaction in a local environment, which can be highly useful for testing and debugging purposes.</p><p>This class requires a <code>BlockchainConfig</code> object as a parameter during initialization. This object contains the blockchain&#39;s configuration used during the execution of the transaction.</p><p>It can also optionally take a <code>Clock</code> object to modify the timestamp used during execution and a boolean value for <code>check_signature</code> to determine whether to check for valid signatures.</p><h3 id="initializing" tabindex="-1">Initializing <a class="header-anchor" href="#initializing" aria-label="Permalink to &quot;Initializing&quot;">​</a></h3><p>To initialize a <code>TransactionExecutor</code>, you need to provide a <code>BlockchainConfig</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># We can use the transport to get the blockchain config</span></span>
<span class="line"><span style="color:#A6ACCD;">config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> transport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_blockchain_config</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">executor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TransactionExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">config</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">check_signature</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">executor</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-6" tabindex="-1">Result <a class="header-anchor" href="#result-6" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">TransactionExecutor check_signature</span><span style="color:#89DDFF;">=False&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>For a detailed understanding of the <code>BlockchainConfig</code> and how to retrieve it using the transport, please refer to our comprehensive guide on <a href="./working-with-transport.html#blockchain-config"><strong><code>Working with Transport</code></strong></a>.</p></div><h3 id="executing-transaction" tabindex="-1">Executing Transaction <a class="header-anchor" href="#executing-transaction" aria-label="Permalink to &quot;Executing Transaction&quot;">​</a></h3><p>Once initialized, you can use the <code>execute</code> method to execute a message on an account state. This method takes a <code>Message</code> object and optionally an <code>AccountState</code> object. If no <code>AccountState</code> is provided, it assumes that the account does not exist.</p><h4 id="external-message" tabindex="-1">External Message <a class="header-anchor" href="#external-message" aria-label="Permalink to &quot;External Message&quot;">​</a></h4><p>Here&#39;s an example of how to use the <code>execute</code> method with an external message:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> new_state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    signed_external_message</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> account</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">new_state</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-7" tabindex="-1">Result <a class="header-anchor" href="#result-7" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bdfafac4450b2689886eb8c5c13cbed3ad18493c04907dfffb21d5ec2c681770</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">AccountState balance</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.907201392</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Active</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In the example above, we&#39;re using a message that was created in our <a href="./working-with-messages.html#creating-a-message-without-a-signature"><strong>Guide on Working with Messages</strong></a>.</p></div><h4 id="internal-message" tabindex="-1">Internal Message <a class="header-anchor" href="#internal-message" aria-label="Permalink to &quot;Internal Message&quot;">​</a></h4><p>You can also execute internal messages in a similar manner. Instead of passing a <code>Message</code> object, you directly pass the cell containing the message:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> new_state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> executor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">unsigned_internal_message</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> account_state</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">new_state</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-8" tabindex="-1">Result <a class="header-anchor" href="#result-8" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">7abd9c98bdf9da2f5060f7610f030ebeb8f2b7b363b865103b696917f508f0dc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">AccountState balance</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.921467796</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Active</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="context-with-clock" tabindex="-1">Context with Clock <a class="header-anchor" href="#context-with-clock" aria-label="Permalink to &quot;Context with Clock&quot;">​</a></h3><p>If you want to simulate a transaction at a specific time, you can provide a <code>Clock</code> object during the initialization of the <code>TransactionExecutor</code>. This object will modify the timestamp used during the execution of the transaction.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">clock </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Clock</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1337</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">executor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TransactionExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">config</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">clock</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">clock</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h3><p>The <code>execute</code> method returns a tuple containing the executed transaction and the new state of the account. If the transaction is successfully executed, the <code>aborted</code> attribute of the transaction will be <code>False</code>, and the <code>exit_code</code> of the <code>compute_phase</code> will be <code>0</code>. If the account state changes as a result of the transaction, the new state will be returned. Otherwise, <code>None</code> will be returned.</p><p>Here&#39;s how to check if a transaction was successful:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Transaction aborted:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">aborted</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Exit code of Compute Phase:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> tx</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">compute_phase</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">exit_code</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">new_state</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-9" tabindex="-1">Result <a class="header-anchor" href="#result-9" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Transaction aborted</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">Exit code of Compute Phase</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">AccountState balance</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.907993575</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Active</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="transaction-tree" tabindex="-1">Transaction Tree <a class="header-anchor" href="#transaction-tree" aria-label="Permalink to &quot;Transaction Tree&quot;">​</a></h3><p>The <code>TransactionTree</code> class offers a structured representation of a series of interconnected transactions, facilitating easy traversal and analysis. This class is instrumental for comprehending the relationships between transactions, especially when a single transaction might lead to multiple subsequent ones.</p><h4 id="decoding-from-bytes" tabindex="-1">Decoding from Bytes <a class="header-anchor" href="#decoding-from-bytes" aria-label="Permalink to &quot;Decoding from Bytes&quot;">​</a></h4><p>The <code>from_bytes</code> method allows for the direct decoding of a transaction tree from raw bytes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TransactionTree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_bytes</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">raw_byte_data</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>This method is particularly beneficial when working with binary transaction data.</p><h4 id="decoding-from-encoded-boc" tabindex="-1">Decoding from Encoded BOC <a class="header-anchor" href="#decoding-from-encoded-boc" aria-label="Permalink to &quot;Decoding from Encoded BOC&quot;">​</a></h4><p>With the <code>decode</code> method, you can decode a transaction tree from a <code>Base64</code> or <code>Hex</code> encoded BOC:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">base64_string </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">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</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">tree </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TransactionTree</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">base64_string</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tree</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-10" tabindex="-1">Result <a class="header-anchor" href="#result-10" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">builtins</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TransactionTree</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> at </span><span style="color:#C792EA;">0x</span><span style="color:#F78C6C;">105014070</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>This functionality is crucial when handling transactions serialized in specific encoding formats.</p><h4 id="accessing-root-transaction" tabindex="-1">Accessing Root Transaction <a class="header-anchor" href="#accessing-root-transaction" aria-label="Permalink to &quot;Accessing Root Transaction&quot;">​</a></h4><p>The <code>root</code> property provides direct access to the tree&#39;s root transaction:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">root_transaction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tree</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">root</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">root_transaction</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-11" tabindex="-1">Result <a class="header-anchor" href="#result-11" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">8be545e0cfbdc421a1c79dfd074ec351ba6a36d89aee927efda2b879dc3be323</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>This root transaction often serves as the starting point for any traversal or analysis.</p><h4 id="listing-child-transactions" tabindex="-1">Listing Child Transactions <a class="header-anchor" href="#listing-child-transactions" aria-label="Permalink to &quot;Listing Child Transactions&quot;">​</a></h4><p>By using the <code>children</code> property, you can retrieve a list of the immediate child transactions that stem from the root:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">child_transactions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tree</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">children</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">child_transactions</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-12" tabindex="-1">Result <a class="header-anchor" href="#result-12" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[&lt;</span><span style="color:#A6ACCD;">builtins</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TransactionTree</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> at </span><span style="color:#C792EA;">0x</span><span style="color:#F78C6C;">103a6fef0</span><span style="color:#89DDFF;">&gt;]</span></span></code></pre></div><h4 id="iterating-over-transactions" tabindex="-1">Iterating Over Transactions <a class="header-anchor" href="#iterating-over-transactions" aria-label="Permalink to &quot;Iterating Over Transactions&quot;">​</a></h4><p>The <code>TransactionTree</code> class is inherently iterable. This means you can effortlessly loop over all transactions in the tree:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> tx </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> tree</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-13" tabindex="-1">Result <a class="header-anchor" href="#result-13" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">8be545e0cfbdc421a1c79dfd074ec351ba6a36d89aee927efda2b879dc3be323</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">4c19d256001246e0bcdd167a94100282dbc73f5aa4ef1f56593f68c8acbc20bf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0f3af431a6bd7325318abff024d23ef661e07f80c099d3f41838f4d7af078fc8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">994e9750c334245c1c0850ed339b738d394f5e3784191ed52ea193815a87cd41</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">f0d4e5dfcdfdfe66b3b25e67b15c5dd15cddf6891693b8d10d091dfdacd943d0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">7c57cf3af3ec7e10c5366b46f3e71b513ba865f63f145cad0bb49b1d07c1b73e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">e506558308a4eee1ead003d52e0b14f0fb81eccdd5477e5fc5b6a07806216fc1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Transaction </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3666f1e674c959c4ecd31ec0d0b2a317c4b7c45d5b1762392a230a6892ea8e85</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Ordinary</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="transaction-trace" tabindex="-1">Transaction Trace <a class="header-anchor" href="#transaction-trace" aria-label="Permalink to &quot;Transaction Trace&quot;">​</a></h2><p>The <code>TraceTransaction</code> class provides an asynchronous iterator for traversing transactions, making it ideal for non-blocking transaction analysis in asynchronous environments.</p><h3 id="obtaining-the-trace" tabindex="-1">Obtaining the Trace <a class="header-anchor" href="#obtaining-the-trace" aria-label="Permalink to &quot;Obtaining the Trace&quot;">​</a></h3><p>To start, you need to obtain the trace using the transport. You can fetch the trace for a specific transaction either by its hash in bytes or by using an instance of the <code>Transaction</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">trace </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> transport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trace_transaction</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tx</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">yield_root</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">trace</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h4 id="result-14" tabindex="-1">Result <a class="header-anchor" href="#result-14" aria-label="Permalink to &quot;Result&quot;">​</a></h4><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">builtins</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">TraceTransaction</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> at </span><span style="color:#C792EA;">0x</span><span style="color:#F78C6C;">100d83310</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="asynchronous-context-management" tabindex="-1">Asynchronous Context Management <a class="header-anchor" href="#asynchronous-context-management" aria-label="Permalink to &quot;Asynchronous Context Management&quot;">​</a></h3><p>Once initialized, the <code>TraceTransaction</code> class can be utilized within an asynchronous context manager (<code>async with</code>) due to its <code>__aenter__</code> and <code>__aexit__</code> methods. This ensures the proper setup and teardown of the iterator.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> transport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trace_transaction</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#FFCB6B;">bytes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromhex</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a82e6603dec13499dd43486203b3304122ae89c13a80b189eef8976834cba413</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">  </span><span style="color:#A6ACCD;font-style:italic;">yield_root</span><span style="color:#89DDFF;">=True)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> trace</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Use the trace iterator here</span></span></code></pre></div><h3 id="asynchronous-iteration" tabindex="-1">Asynchronous Iteration <a class="header-anchor" href="#asynchronous-iteration" aria-label="Permalink to &quot;Asynchronous Iteration&quot;">​</a></h3><p>With the <code>__aiter__</code> and <code>__anext__</code> methods, you can asynchronously iterate over the transactions.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> transaction </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> trace</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">transaction</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="waiting-for-completion" tabindex="-1">Waiting for Completion <a class="header-anchor" href="#waiting-for-completion" aria-label="Permalink to &quot;Waiting for Completion&quot;">​</a></h3><p>After starting the iteration, you might want to ensure that all transactions are fetched. The <code>wait</code> method allows you to asynchronously pause until the last transaction is retrieved.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h3 id="closing-the-iterator" tabindex="-1">Closing the Iterator <a class="header-anchor" href="#closing-the-iterator" aria-label="Permalink to &quot;Closing the Iterator&quot;">​</a></h3><p>After you&#39;re done with the iterator, especially if you&#39;re not using the context manager approach, it&#39;s a good practice to close it to free up resources. The <code>close</code> method allows for the explicit termination of the asynchronous iterator.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> trace</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span></code></pre></div>`,132),l=[t];function p(c,r,A,i,y,F){return a(),n("div",null,l)}const d=s(e,[["render",p]]);export{h as __pageData,d as default};
