import{_ as t,v as o,b as n,R as e}from"./chunks/framework.f247d2cd.js";const g=JSON.parse('{"title":"Nekoton-Python","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"src/pages/index.md"}'),i={name:"index.md"},a=e('<h1 id="nekoton-python" tabindex="-1">Nekoton-Python <a class="header-anchor" href="#nekoton-python" aria-label="Permalink to &quot;Nekoton-Python&quot;">â€‹</a></h1><p>Nekoton-Python is a Python binding for <a href="https://github.com/broxus/nekoton" target="_blank" rel="noreferrer">Nekoton</a>, a Rust library that acts as the foundation for wallets interacting with TVM (TON Virtual Machine) compatible blockchains. This binding allows Python developers to utilize Nekoton&#39;s functionality in their applications, offering an abstraction over transport and support for <a href="https://docs.everscale.network/standard/TIP-3" target="_blank" rel="noreferrer">TIP-3.1</a> / Ever tokens. It can be used to develop Python applications that interact with blockchain.</p><p>Nekoton-Python primarily consists of the following modules:</p><ul><li><strong>abi</strong>: This module is responsible for handling the Application Binary Interface (ABI), which is used for interacting with smart contracts on the blockchain.</li><li><strong>crypto</strong>: This module provides cryptographic functionalities, including signature verification for public keys and key pairs.</li><li><strong>models</strong>: This module defines various data models used by Nekoton.</li><li><strong>transport</strong>: This module provides an abstraction over the transport layer, allowing Nekoton to send and receive messages from the blockchain.</li><li><strong>util</strong>: This module contains various utility functions used throughout Nekoton.</li></ul>',4),r=[a];function s(l,c,h,d,p,u){return o(),n("div",null,r)}const k=t(i,[["render",s]]);export{g as __pageData,k as default};
