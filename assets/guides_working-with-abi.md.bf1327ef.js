import{_ as s,v as a,b as n,R as o}from"./chunks/framework.f247d2cd.js";const d=JSON.parse('{"title":"Working with ABI","description":"","frontmatter":{"outline":[2,4]},"headers":[],"relativePath":"guides/working-with-abi.md","filePath":"src/pages/guides/working-with-abi.md"}'),l={name:"guides/working-with-abi.md"},e=o(`<h1 id="working-with-abi" tabindex="-1">Working with ABI <a class="header-anchor" href="#working-with-abi" aria-label="Permalink to &quot;Working with ABI&quot;">​</a></h1><p>The Application Binary Interface (ABI) plays a fundamental role in interacting with smart contracts in Nekoton-Python. This section provides a comprehensive guide to the primary methods for working with the Contract ABI, Function ABI, and Event ABI, all of which are facilitated by <code>nekoton-python</code>.</p><p>The ABI is a specification that outlines the methods and structures of smart contracts, enabling interaction with them on the blockchain. It comprises:</p><ul><li><strong>Contract ABI</strong>: This provides an exhaustive description of a smart contract, including its functions and events.</li><li><strong>Function ABI</strong>: This describes a function within a smart contract, detailing its name, inputs, and outputs.</li><li><strong>Event ABI</strong>: This outlines an event within a smart contract, specifying its name and inputs.</li></ul><h2 id="contract-abi" tabindex="-1">Contract ABI <a class="header-anchor" href="#contract-abi" aria-label="Permalink to &quot;Contract ABI&quot;">​</a></h2><p>The Contract ABI is integral to interacting with smart contracts. It details the methods and structures that smart contracts employ, which are vital for interaction.</p><h3 id="initialization" tabindex="-1">Initialization <a class="header-anchor" href="#initialization" aria-label="Permalink to &quot;Initialization&quot;">​</a></h3><p>A <code>ContractAbi</code> object is initialized using its constructor, which accepts a string with a JSON ABI description as an argument. Here&#39;s an example of declaring the ABI of a contract:</p><details class="details custom-block"><summary>ABI Definition</summary><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">example_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContractAbi</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#C3E88D;">    &#39;ABI version&#39;: 2,</span></span>
<span class="line"><span style="color:#C3E88D;">    version: &#39;2.3&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">    header: [&#39;time&#39;],</span></span>
<span class="line"><span style="color:#C3E88D;">    functions: [</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;constructor&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;someParam&#39;, type: &#39;uint128&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;second&#39;, type: &#39;string&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;getComplexState&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [</span></span>
<span class="line"><span style="color:#C3E88D;">          {</span></span>
<span class="line"><span style="color:#C3E88D;">            components: [</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;first&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;second&#39;, type: &#39;string&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">            ],</span></span>
<span class="line"><span style="color:#C3E88D;">            name: &#39;value0&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">            type: &#39;tuple&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">          },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;setVariable&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [{ name: &#39;someParam&#39;, type: &#39;uint128&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [{ name: &#39;value0&#39;, type: &#39;uint32&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;setVariableExternal&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [{ name: &#39;someParam&#39;, type: &#39;uint128&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;getSecondElementWithPrefix&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [{ name: &#39;prefix&#39;, type: &#39;string&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [{ name: &#39;value0&#39;, type: &#39;string&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;computeSmth&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;answerId&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;offset&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [</span></span>
<span class="line"><span style="color:#C3E88D;">          {</span></span>
<span class="line"><span style="color:#C3E88D;">            components: [</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;first&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;second&#39;, type: &#39;string&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">            ],</span></span>
<span class="line"><span style="color:#C3E88D;">            name: &#39;res&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">            type: &#39;tuple&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">          },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;simpleState&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [{ name: &#39;simpleState&#39;, type: &#39;uint128&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">    ],</span></span>
<span class="line"><span style="color:#C3E88D;">    data: [{ key: 1, name: &#39;nonce&#39;, type: &#39;uint32&#39; }],</span></span>
<span class="line"><span style="color:#C3E88D;">    events: [</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;StateChanged&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        inputs: [</span></span>
<span class="line"><span style="color:#C3E88D;">          {</span></span>
<span class="line"><span style="color:#C3E88D;">            components: [</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;first&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">              { name: &#39;second&#39;, type: &#39;string&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">            ],</span></span>
<span class="line"><span style="color:#C3E88D;">            name: &#39;complexState&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">            type: &#39;tuple&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">          },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">        outputs: [],</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">    ],</span></span>
<span class="line"><span style="color:#C3E88D;">    fields: [</span></span>
<span class="line"><span style="color:#C3E88D;">      { name: &#39;_pubkey&#39;, type: &#39;uint256&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">      { name: &#39;_timestamp&#39;, type: &#39;uint64&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">      { name: &#39;_constructorFlag&#39;, type: &#39;bool&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">      { name: &#39;nonce&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">      { name: &#39;simpleState&#39;, type: &#39;uint128&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">      {</span></span>
<span class="line"><span style="color:#C3E88D;">        components: [</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;first&#39;, type: &#39;uint32&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">          { name: &#39;second&#39;, type: &#39;string&#39; },</span></span>
<span class="line"><span style="color:#C3E88D;">        ],</span></span>
<span class="line"><span style="color:#C3E88D;">        name: &#39;complexState&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">        type: &#39;tuple&#39;,</span></span>
<span class="line"><span style="color:#C3E88D;">      },</span></span>
<span class="line"><span style="color:#C3E88D;">    ],</span></span>
<span class="line"><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&quot;&quot;&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div></details><h4 id="reading-from-a-file" tabindex="-1">Reading from a File <a class="header-anchor" href="#reading-from-a-file" aria-label="Permalink to &quot;Reading from a File&quot;">​</a></h4><p>The <code>ContractAbi</code> class provides a <code>from_file</code> method to read the ABI from a file. This method takes a file path as an argument and returns a <code>ContractAbi</code> object.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ContractAbi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_file</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/path/to/your/abi.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="decoding-contract-abi" tabindex="-1">Decoding Contract ABI <a class="header-anchor" href="#decoding-contract-abi" aria-label="Permalink to &quot;Decoding Contract ABI&quot;">​</a></h3><p>The <code>decode_init_data</code> method decodes initial contract data. It takes a <code>Cell</code> object as an argument and returns a tuple containing an optional <code>PublicKey</code> and a dictionary with initial data values.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public_key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_init_data</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="searching-for-function-abi" tabindex="-1">Searching for Function ABI <a class="header-anchor" href="#searching-for-function-abi" aria-label="Permalink to &quot;Searching for Function ABI&quot;">​</a></h3><p>The <code>get_function</code> method of the <code>ContractAbi</code> class searches for a function ABI by its name. It returns <code>FunctionAbi</code> objects, or <code>None</code> if no function with the specified name exists.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">computeSmth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="encoding-initial-contract-data" tabindex="-1">Encoding Initial Contract Data <a class="header-anchor" href="#encoding-initial-contract-data" aria-label="Permalink to &quot;Encoding Initial Contract Data&quot;">​</a></h3><p>The <code>ContractAbi</code> class provides the <code>encode_init_data</code> method to encode initial contract data. It takes a dictionary with initial data values, an optional <code>PublicKey</code>, and an optional existing <code>Cell</code> object as arguments, and returns a <code>Cell</code> object.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cell </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode_init_data</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> public_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> existing_data</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="function-abi" tabindex="-1">Function ABI <a class="header-anchor" href="#function-abi" aria-label="Permalink to &quot;Function ABI&quot;">​</a></h2><p>The <code>FunctionAbi</code> class facilitates interaction with the functions defined in the smart contract ABI.</p><h3 id="calling-abi-functions" tabindex="-1">Calling ABI Functions <a class="header-anchor" href="#calling-abi-functions" aria-label="Permalink to &quot;Calling ABI Functions&quot;">​</a></h3><p>ABI functions can be invoked using the <code>call</code> method provided by the <code>FunctionAbi</code> class. This method takes two arguments: the current account state and a dictionary of input parameters. The account state can be obtained using the <code>get_account_state</code> method of the <code>Transport</code> class.</p><h4 id="calling-simple-getters" tabindex="-1">Calling Simple Getters <a class="header-anchor" href="#calling-simple-getters" aria-label="Permalink to &quot;Calling Simple Getters&quot;">​</a></h4><p>Simple getters are functions that allow you to retrieve publicly visible data from the contract. They do not require user interaction and can be called without any parameters or with parameters, depending on the function definition in the ABI. Here&#39;s an example of how to call a simple getter:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Initialize the ABI and get the function</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getComplexState</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Call the function</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">account_state</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">={})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result" tabindex="-1">Result <a class="header-anchor" href="#result" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">ExecutionOutput exit_code</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> has_output</span><span style="color:#89DDFF;">=True&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span></code></pre></div><p>If the getter requires parameters, they can be provided in the <code>input</code> dictionary:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Initialize the ABI and get the function</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getSecondElementWithPrefix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Call the function with parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">account_state</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prefix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-1" tabindex="-1">Result <a class="header-anchor" href="#result-1" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that the arguments must have the same type as described in the ABI, and they are merged into one object by <code>name</code>.</p></div><h4 id="calling-responsible-methods" tabindex="-1">Calling Responsible Methods <a class="header-anchor" href="#calling-responsible-methods" aria-label="Permalink to &quot;Calling Responsible Methods&quot;">​</a></h4><p>Responsible methods are a special type of functions that can either be called via an internal message or locally as a getter via an external message. They differ from simple getters as they have an additional argument of type <code>uint32</code> which is usually called <code>answerId</code>.</p><p>When a responsible method is called on-chain, it returns the result in an outgoing internal message to the caller with <code>answerId</code> as a function id. When it is called locally, it behaves the same way as simple getters. Here&#39;s an example of how to call a responsible method:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Initialize the ABI and get the function</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">computeSmth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Call the function with parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">account_state</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">offset</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">999</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">answerId</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-2" tabindex="-1">Result <a class="header-anchor" href="#result-2" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">res</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span></code></pre></div><h3 id="encoding-messages" tabindex="-1">Encoding Messages <a class="header-anchor" href="#encoding-messages" aria-label="Permalink to &quot;Encoding Messages&quot;">​</a></h3><h4 id="external-messages" tabindex="-1">External Messages <a class="header-anchor" href="#external-messages" aria-label="Permalink to &quot;External Messages&quot;">​</a></h4><p>The <code>encode_external_message</code> method is utilized to prepare an external message for transmission. External messages facilitate the invocation of functions in smart contracts from off-chain applications.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Initialize the ABI and get the function</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setVariableExternal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Define the input parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">input_params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">someParam</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">66</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Define other necessary parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">dst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0:06c404998bb4a6f5cfe465939e3e3562ed573e27f7906355b1a9e1cf61f5ba2e</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">timeout </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">clock </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Clock</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">state_init </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">StateInit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">base64</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">base64</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Encode the unsigned external message</span></span>
<span class="line"><span style="color:#A6ACCD;">ext_unsigned_message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode_external_message</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  dst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  input_params</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  public_key</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  state_init</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  timeout</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  clock</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ext_unsigned_message</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-3" tabindex="-1">Result <a class="header-anchor" href="#result-3" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">UnsignedExternalMessage </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c07407d60d09753fc41d32b1124264df0d6033100bd36fd7c77211e47297f38e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> expire_at</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1694215298</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="internal-messages" tabindex="-1">Internal Messages <a class="header-anchor" href="#internal-messages" aria-label="Permalink to &quot;Internal Messages&quot;">​</a></h4><p>The <code>encode_internal_message</code> method is employed to prepare an internal message for transmission. Internal messages are designated for function calls between on-chain contracts.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Initialize the ABI and get the function</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setVariable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Define the input parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">input_params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">someParam</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1337</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Define other necessary parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">**</span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 1 Native coin</span></span>
<span class="line"><span style="color:#A6ACCD;">bounce </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">dst </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0:06c404998bb4a6f5cfe465939e3e3562ed573e27f7906355b1a9e1cf61f5ba2e</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">account </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Address</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your_account_address</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Encode the internal message</span></span>
<span class="line"><span style="color:#A6ACCD;">internal_message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode_internal_message</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">  input_params</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  bounce</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  dst</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  account</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  state_init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">internal_message</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-4" tabindex="-1">Result <a class="header-anchor" href="#result-4" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Message </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b25915ce08b5ba4ade9323a0011d155f6cfe2bc9439d923d67d9dd0501113f03</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Internal</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="encoding-message-body" tabindex="-1">Encoding Message Body <a class="header-anchor" href="#encoding-message-body" aria-label="Permalink to &quot;Encoding Message Body&quot;">​</a></h3><h4 id="external-message-body" tabindex="-1">External Message Body <a class="header-anchor" href="#external-message-body" aria-label="Permalink to &quot;External Message Body&quot;">​</a></h4><p>The <code>encode_external_body</code> method is used to prepare the body of an external message. This body contains the necessary data for the external message to be processed by the smart contract.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Encode the external message body</span></span>
<span class="line"><span style="color:#A6ACCD;">external_body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode_external_body</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">input_params</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> public_key</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> timeout</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> dst</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> clock</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">external_body</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-5" tabindex="-1">Result <a class="header-anchor" href="#result-5" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">UnsignedBody </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a14be6da67c3395f57c48eabecd443549316933e94cbca929f6224c16e7dd7aa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> expire_at</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1694215298</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="internal-message-bodies" tabindex="-1">Internal Message Bodies <a class="header-anchor" href="#internal-message-bodies" aria-label="Permalink to &quot;Internal Message Bodies&quot;">​</a></h4><p>The <code>encode_internal_body</code> method is used to prepare the body of an internal message. This body contains the necessary data for the internal message to be processed by the smart contract.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Define the input parameters</span></span>
<span class="line"><span style="color:#A6ACCD;">input_params </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">someParam</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1337</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Encode the internal input</span></span>
<span class="line"><span style="color:#A6ACCD;">internal_input </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode_internal_input</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">input_params</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">internal_input</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-6" tabindex="-1">Result <a class="header-anchor" href="#result-6" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Cell repr_hash</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">13e1b0dc2a0f092c40a99ccbdd3022d8660c818651aaecff9932333cfb09ca36</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bits</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">160</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> refs</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="decoding-transactions-as-function-calls" tabindex="-1">Decoding Transactions as Function Calls <a class="header-anchor" href="#decoding-transactions-as-function-calls" aria-label="Permalink to &quot;Decoding Transactions as Function Calls&quot;">​</a></h3><p>The <code>decode_transaction</code> method decodes a transaction as a function call. It takes a <code>Transaction</code> object as an argument and returns a <code>FunctionCall</code> object.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Please note that we have not yet covered the Transport aspect.</p><p>For information on how to set it up and its various functions, please refer to <a href="./working-with-transport.html">Working with Transport</a>.</p></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">set_variable_tx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> transport</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_transaction</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#FFCB6B;">bytes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromhex</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b0e21d98e2536491a9cd4b56a72a38a8a41e7c25cd7163c95aba186f54700ec1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">function_call </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_transaction</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">set_variable_tx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">function_call</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">function_call</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> function_call</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-7" tabindex="-1">Result <a class="header-anchor" href="#result-7" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">builtins</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">FunctionCall</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#A6ACCD;"> at </span><span style="color:#C792EA;">0x</span><span style="color:#F78C6C;">101d23600</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someParam</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><h3 id="decoding-message-bodies-as-input-or-output" tabindex="-1">Decoding Message Bodies as Input or Output <a class="header-anchor" href="#decoding-message-bodies-as-input-or-output" aria-label="Permalink to &quot;Decoding Message Bodies as Input or Output&quot;">​</a></h3><p>The <code>decode_input</code> and <code>decode_output</code> methods decode a message body as input or output. They take a <code>Cell</code> object and an optional boolean value as arguments, and return a dictionary with the decoded data.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Setting up the ABI for a specific function.</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setVariable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Decoding a message body as an input using \`decode_input\` method from \`function_abi\` object.</span></span>
<span class="line"><span style="color:#A6ACCD;">message_body_cell </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">te6ccgEBAQEAFgAAKDja0OwAAAAAAAAAAAAAAAAAAAU5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">input_data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_input</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message_body_cell</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">True)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">input_data</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-8" tabindex="-1">Result <a class="header-anchor" href="#result-8" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someParam</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Setting up the ABI for a specific function.</span></span>
<span class="line"><span style="color:#A6ACCD;">function_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_function</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setVariable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Decoding a message body as an output using \`decode_output\` method from \`function_abi\` object.</span></span>
<span class="line"><span style="color:#A6ACCD;">message_body_cell </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">te6ccgEBAQEAFgAAKDja0OwAAAAAAAAAAAAAAAAAAAU5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">output_data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> function_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_output</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message_body_cell</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">output_data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># {}</span></span></code></pre></div><h2 id="event-abi" tabindex="-1">Event ABI <a class="header-anchor" href="#event-abi" aria-label="Permalink to &quot;Event ABI&quot;">​</a></h2><p>The <code>EventAbi</code> class is used to interact with the events defined in the smart contract ABI.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StateChanged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">inputs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">components</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uint32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">complexState</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tuple</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">outputs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="searching-for-event-abi" tabindex="-1">Searching for Event ABI <a class="header-anchor" href="#searching-for-event-abi" aria-label="Permalink to &quot;Searching for Event ABI&quot;">​</a></h3><p>The <code>get_event</code> method of the <code>ContractAbi</code> class searches for an event ABI by its name. It returns <code>EventAbi</code> objects, or <code>None</code> if no event with the specified name exists.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Searching for an event ABI by its name using \`get_event\` method of \`abi\` object.</span></span>
<span class="line"><span style="color:#A6ACCD;">event_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_event</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StateChanged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">event_abi</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-9" tabindex="-1">Result <a class="header-anchor" href="#result-9" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">EventAbi name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">StateChanged</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">0x</span><span style="color:#F78C6C;">5339c8a5</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="decoding-event-data" tabindex="-1">Decoding Event Data <a class="header-anchor" href="#decoding-event-data" aria-label="Permalink to &quot;Decoding Event Data&quot;">​</a></h3><p>The <code>decode_message</code> and <code>decode_message_body</code> methods decode event data from a message or a message body. They take a <code>Message</code> or <code>Cell</code> object as an argument respectively, and return a dictionary with the decoded data.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Firstly, we retrieve the ABI for a specific event by calling the \`get_event\` method.</span></span>
<span class="line"><span style="color:#A6ACCD;">event_abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_event</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StateChanged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Here, we decode two different message bodies (as &#39;Cell&#39; objects) to extract the data they contain.</span></span>
<span class="line"><span style="color:#A6ACCD;">message_body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">te6ccgEBAgEAEQABEFM5yKUAAAFRAQAIdGVzdA==</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">message_boc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">te6ccgEBAgEAQAABbeAANiAkzF2lN65/Iyyc8fGrF2q58T+8gxqtjU8Oew+t0XAAACbh/GVjCMn3j2wpnORSgAAAqMABAAh0ZXN0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Next, we create a &#39;Message&#39; object from one of the previously decoded &#39;Cell&#39; objects.</span></span>
<span class="line"><span style="color:#A6ACCD;">message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_cell</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message_boc</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Using the \`event_abi\` object, we call \`decode_message\` and \`decode_message_body\` methods</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># to decode the event data from the message and the message body, respectively.</span></span>
<span class="line"><span style="color:#A6ACCD;">event_data_from_message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> event_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_message</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">event_data_from_body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> event_abi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode_message_body</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">message_body</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">event_data_from_message</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">event_data_from_body</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-10" tabindex="-1">Result <a class="header-anchor" href="#result-10" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">complexState</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">337</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">complexState</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">first</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">337</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">second</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}</span></span></code></pre></div><h2 id="working-with-tokens" tabindex="-1">Working with Tokens <a class="header-anchor" href="#working-with-tokens" aria-label="Permalink to &quot;Working with Tokens&quot;">​</a></h2><p>Tokens in Nekoton-Python are represented by the <code>Tokens</code> class. This class provides a convenient way to work with tokens.</p><h3 id="creating-tokens" tabindex="-1">Creating Tokens <a class="header-anchor" href="#creating-tokens" aria-label="Permalink to &quot;Creating Tokens&quot;">​</a></h3><p>To create a <code>Tokens</code> object, you can use the constructor of the <code>Tokens</code> class. This constructor takes a decimal or integer value.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> nekoton </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Tokens</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Define the amount of tokens.</span></span>
<span class="line"><span style="color:#A6ACCD;">amount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Create a Tokens object.</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">amount</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-11" tabindex="-1">Result <a class="header-anchor" href="#result-11" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Tokens</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span></code></pre></div><h3 id="operations-with-tokens" tabindex="-1">Operations with Tokens <a class="header-anchor" href="#operations-with-tokens" aria-label="Permalink to &quot;Operations with Tokens&quot;">​</a></h3><p>The <code>Tokens</code> class, as mentioned earlier, supports several arithmetic and comparison operations, making it flexible and convenient for various use cases.</p><h4 id="from-nano" tabindex="-1"><strong>From Nano</strong> <a class="header-anchor" href="#from-nano" aria-label="Permalink to &quot;**From Nano**&quot;">​</a></h4><p>You can convert an amount in nano to a <code>Tokens</code> object using the statimethod <code>from_nano</code>.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">nano_amount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1_000_000_000</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens_from_nano </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Tokens</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_nano</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">nano_amount</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_from_nano</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h5 id="result-12" tabindex="-1">Result <a class="header-anchor" href="#result-12" aria-label="Permalink to &quot;Result&quot;">​</a></h5><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Tokens</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><h4 id="to-nano" tabindex="-1"><strong>To Nano</strong> <a class="header-anchor" href="#to-nano" aria-label="Permalink to &quot;**To Nano**&quot;">​</a></h4><ul><li><code>to_nano</code>: Convert the token amount back to its nano equivalent.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.001</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to_nano</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 1000000</span></span></code></pre></div><ul><li>Converting to integers or checking boolean value:</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 1_000_000_000</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">bool</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># True for non-zero values</span></span></code></pre></div><h4 id="properties" tabindex="-1"><strong>Properties</strong> <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;**Properties**&quot;">​</a></h4><ul><li><code>is_signed</code>: Helps determine if the token amount has a negative value.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">negative_tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">negative_tokens</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">is_signed</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># True</span></span></code></pre></div><ul><li><code>is_zero</code>: Helps check if the token amount is zero.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">zero_tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">zero_tokens</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">is_zero</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># True</span></span></code></pre></div><h4 id="comparisons" tabindex="-1"><strong>Comparisons</strong> <a class="header-anchor" href="#comparisons" aria-label="Permalink to &quot;**Comparisons**&quot;">​</a></h4><ul><li><code>max</code>: Compare two <code>Tokens</code> objects and return the one with tmaximum value.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens_a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens_b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_b</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 100</span></span></code></pre></div><ul><li><code>min</code>: Compare two <code>Tokens</code> objects and return the one with tminimum value.</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens_a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens_b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_b</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 50</span></span></code></pre></div><h4 id="arithmetic-operations" tabindex="-1"><strong>Arithmetic Operations</strong> <a class="header-anchor" href="#arithmetic-operations" aria-label="Permalink to &quot;**Arithmetic Operations**&quot;">​</a></h4><p>The class supports standard arithmetic operations. You can addsubtract, multiply, and divide tokens, or get their absolute value.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens_a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens_b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> tokens_b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Tokens: 150</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> tokens_b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Tokens: 50</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;"># Tokens: 200</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;"># Tokens: 50</span></span></code></pre></div><h4 id="unary-operators" tabindex="-1"><strong>Unary Operators</strong> <a class="header-anchor" href="#unary-operators" aria-label="Permalink to &quot;**Unary Operators**&quot;">​</a></h4><p>These operators act on a single operand and return a result. Foinstance, you can get the positive or negative value of tokens.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(+</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Tokens: 100</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(-</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Tokens: -100</span></span></code></pre></div><h4 id="comparisons-1" tabindex="-1"><strong>Comparisons</strong> <a class="header-anchor" href="#comparisons-1" aria-label="Permalink to &quot;**Comparisons**&quot;">​</a></h4><p>You can directly compare two <code>Tokens</code> objects using standard comparison operators.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens_a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">tokens_b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">&gt;</span><span style="color:#82AAFF;"> tokens_b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># True</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;"> tokens_b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># False</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens_a </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> tokens_b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># False</span></span></code></pre></div><h4 id="absolute-value" tabindex="-1"><strong>Absolute Value</strong> <a class="header-anchor" href="#absolute-value" aria-label="Permalink to &quot;**Absolute Value**&quot;">​</a></h4><p>The <code>abs</code> function can be used to get the absolute value of the tokens.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tokens </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Tokens</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">abs</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tokens</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Tokens: 100</span></span></code></pre></div>`,129),p=[e];function t(c,r,i,F,y,D){return a(),n("div",null,p)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
